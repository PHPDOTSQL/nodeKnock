nodeKnock 0.1 by freddyb
     for nodeJS 0.2.5

FAQ
Q: What is the secret?
A: The secret is to be defined a priori in nodeKnock.cfg

Q: How long does an authorization last?
A: User-defined amount of seconds in config['duration'] (nodeKnock.cfg)

Q: Why do I have to set my own IP for the client?
A: Because the user usually knows best :)

Protocol (abstract):
- One-Step Protocol
- Client sends header, timestamp, sha1(client_ip + secret + timestamp')
- Server decides whether timestamp is not too old and builds his own
  sha1(client_ip + secret + timestamp'). When matching, the server adds
  client_ip to the list of authorized IPs.

Protocol (detailed):
- The protocol is underlying ICMP Echo Requests. Usually Echo Requests leave
  room for a few custom bytes of our own. We use them to send messages to
  the server.
  The first three bytes are (probably subject to change for future nodeKnock
  versions) 0x786875. After that, the client will send a 4 Byte timestamp
  (the highest byte first) followed by 9 bytes of the sha1 sum of:
   client-ip, secret, timestamp.
     all inputs are transformed into strings on beforehand.
     e.g. sha1('127.0.0.1'+'foobar'+'1234567').


Known Issues/Problems
- proof of concept. no real port-opening/-closing
- lot's of confusion on mixed use of strings like '0F' and ints like '15'
- tested with linux only
- the cool, polyglott config-file format exposes both client and server toward
    a command execution vulnerability if a local attacker has write-access.
- utilizing the timestamp for authentication requires us to have synchronous
     time on client and server.
- hash-strength is limited and possibly bad.
    Idea: randomize substring-slicing of hash and take e.g. lowest tstamp byte?
